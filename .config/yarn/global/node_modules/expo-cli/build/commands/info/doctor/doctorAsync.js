"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.actionAsync = actionAsync;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _log() {
  const data = _interopRequireDefault(require("../../../log"));

  _log = function () {
    return data;
  };

  return data;
}

function _getRemoteVersionsForSdk() {
  const data = require("../../../utils/getRemoteVersionsForSdk");

  _getRemoteVersionsForSdk = function () {
    return data;
  };

  return data;
}

function _profileMethod() {
  const data = require("../../utils/profileMethod");

  _profileMethod = function () {
    return data;
  };

  return data;
}

function _validateDependenciesVersions() {
  const data = require("../../utils/validateDependenciesVersions");

  _validateDependenciesVersions = function () {
    return data;
  };

  return data;
}

function _explain() {
  const data = require("./depedencies/explain");

  _explain = function () {
    return data;
  };

  return data;
}

function _windows() {
  const data = require("./windows");

  _windows = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function validateSupportPackagesAsync(sdkVersion) {
  const versionsForSdk = await (0, _getRemoteVersionsForSdk().getRemoteVersionsForSdk)(sdkVersion);
  const supportPackagesToValidate = ['expo-modules-autolinking', '@expo/config-plugins', '@expo/prebuild-config'];

  for (const pkg of supportPackagesToValidate) {
    const version = versionsForSdk[pkg];

    if (version) {
      await (0, _explain().warnAboutDeepDependenciesAsync)({
        name: pkg,
        version
      });
    }
  }

  _log().default.newLine();
}

async function actionAsync(projectRoot, options) {
  await (0, _windows().warnUponCmdExe)();
  const {
    exp,
    pkg
  } = (0, _profileMethod().profileMethod)(_config().getConfig)(projectRoot); // Only use the new validation on SDK +45.

  if (_xdl().Versions.gteSdkVersion(exp, '45.0.0')) {
    await validateSupportPackagesAsync(exp.sdkVersion);
  }

  const areDepsValid = await (0, _profileMethod().profileMethod)(_validateDependenciesVersions().validateDependenciesVersionsAsync)(projectRoot, exp, pkg, options.fixDependencies); // note: this currently only warns when something isn't right, it doesn't fail

  await _xdl().Doctor.validateExpoServersAsync(projectRoot);

  if ((await _xdl().Doctor.validateWithNetworkAsync(projectRoot)) === _xdl().Doctor.NO_ISSUES && areDepsValid) {
    _log().default.log(_chalk().default.green(`ðŸŽ‰ Didn't find any issues with the project!`));
  } else {
    process.exitCode = 1;
  }
}
//# sourceMappingURL=doctorAsync.js.map