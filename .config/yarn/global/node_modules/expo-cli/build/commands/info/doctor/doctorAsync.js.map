{"version":3,"file":"doctorAsync.js","names":["validateSupportPackagesAsync","sdkVersion","versionsForSdk","getRemoteVersionsForSdk","supportPackagesToValidate","pkg","version","warnAboutDeepDependenciesAsync","name","Log","newLine","actionAsync","projectRoot","options","warnUponCmdExe","exp","profileMethod","getConfig","Versions","gteSdkVersion","areDepsValid","validateDependenciesVersionsAsync","fixDependencies","Doctor","validateExpoServersAsync","validateWithNetworkAsync","NO_ISSUES","log","chalk","green","process","exitCode"],"sources":["../../../../src/commands/info/doctor/doctorAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\nimport { Doctor, Versions } from 'xdl';\n\nimport Log from '../../../log';\nimport { getRemoteVersionsForSdk } from '../../../utils/getRemoteVersionsForSdk';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { validateDependenciesVersionsAsync } from '../../utils/validateDependenciesVersions';\nimport { warnAboutDeepDependenciesAsync } from './depedencies/explain';\nimport { warnUponCmdExe } from './windows';\n\ntype Options = {\n  fixDependencies?: boolean;\n};\n\nasync function validateSupportPackagesAsync(sdkVersion: string) {\n  const versionsForSdk = await getRemoteVersionsForSdk(sdkVersion);\n\n  const supportPackagesToValidate = [\n    'expo-modules-autolinking',\n    '@expo/config-plugins',\n    '@expo/prebuild-config',\n  ];\n\n  for (const pkg of supportPackagesToValidate) {\n    const version = versionsForSdk[pkg];\n    if (version) {\n      await warnAboutDeepDependenciesAsync({ name: pkg, version });\n    }\n  }\n  Log.newLine();\n}\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  await warnUponCmdExe();\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot);\n\n  // Only use the new validation on SDK +45.\n  if (Versions.gteSdkVersion(exp, '45.0.0')) {\n    await validateSupportPackagesAsync(exp.sdkVersion!);\n  }\n\n  const areDepsValid = await profileMethod(validateDependenciesVersionsAsync)(\n    projectRoot,\n    exp,\n    pkg,\n    options.fixDependencies\n  );\n\n  // note: this currently only warns when something isn't right, it doesn't fail\n  await Doctor.validateExpoServersAsync(projectRoot);\n\n  if ((await Doctor.validateWithNetworkAsync(projectRoot)) === Doctor.NO_ISSUES && areDepsValid) {\n    Log.log(chalk.green(`ðŸŽ‰ Didn't find any issues with the project!`));\n  } else {\n    process.exitCode = 1;\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAMA,eAAeA,4BAAf,CAA4CC,UAA5C,EAAgE;EAC9D,MAAMC,cAAc,GAAG,MAAM,IAAAC,kDAAA,EAAwBF,UAAxB,CAA7B;EAEA,MAAMG,yBAAyB,GAAG,CAChC,0BADgC,EAEhC,sBAFgC,EAGhC,uBAHgC,CAAlC;;EAMA,KAAK,MAAMC,GAAX,IAAkBD,yBAAlB,EAA6C;IAC3C,MAAME,OAAO,GAAGJ,cAAc,CAACG,GAAD,CAA9B;;IACA,IAAIC,OAAJ,EAAa;MACX,MAAM,IAAAC,yCAAA,EAA+B;QAAEC,IAAI,EAAEH,GAAR;QAAaC;MAAb,CAA/B,CAAN;IACD;EACF;;EACDG,cAAA,CAAIC,OAAJ;AACD;;AAEM,eAAeC,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAkE;EACvE,MAAM,IAAAC,yBAAA,GAAN;EAEA,MAAM;IAAEC,GAAF;IAAOV;EAAP,IAAe,IAAAW,8BAAA,EAAcC,mBAAd,EAAyBL,WAAzB,CAArB,CAHuE,CAKvE;;EACA,IAAIM,eAAA,CAASC,aAAT,CAAuBJ,GAAvB,EAA4B,QAA5B,CAAJ,EAA2C;IACzC,MAAMf,4BAA4B,CAACe,GAAG,CAACd,UAAL,CAAlC;EACD;;EAED,MAAMmB,YAAY,GAAG,MAAM,IAAAJ,8BAAA,EAAcK,iEAAd,EACzBT,WADyB,EAEzBG,GAFyB,EAGzBV,GAHyB,EAIzBQ,OAAO,CAACS,eAJiB,CAA3B,CAVuE,CAiBvE;;EACA,MAAMC,aAAA,CAAOC,wBAAP,CAAgCZ,WAAhC,CAAN;;EAEA,IAAI,CAAC,MAAMW,aAAA,CAAOE,wBAAP,CAAgCb,WAAhC,CAAP,MAAyDW,aAAA,CAAOG,SAAhE,IAA6EN,YAAjF,EAA+F;IAC7FX,cAAA,CAAIkB,GAAJ,CAAQC,gBAAA,CAAMC,KAAN,CAAa,6CAAb,CAAR;EACD,CAFD,MAEO;IACLC,OAAO,CAACC,QAAR,GAAmB,CAAnB;EACD;AACF"}