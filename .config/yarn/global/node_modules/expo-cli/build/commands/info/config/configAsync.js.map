{"version":3,"file":"configAsync.js","names":["actionAsync","projectRoot","options","config","type","profileMethod","getPrebuildConfigAsync","platforms","compileModsAsync","exp","introspect","assertMissingModProviders","modRequest","modResults","getConfig","skipSDKVersionRequirement","isPublicConfig","CommandError","configOutput","full","json","Log","log","logConfig","nested","JSON","stringify"],"sources":["../../../../src/commands/info/config/configAsync.ts"],"sourcesContent":["import { getConfig, ProjectConfig } from '@expo/config';\nimport { compileModsAsync } from '@expo/config-plugins/build/plugins/mod-compiler';\nimport { getPrebuildConfigAsync } from '@expo/prebuild-config';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { logConfig } from '../../eject/configureProjectAsync';\nimport { profileMethod } from '../../utils/profileMethod';\n\ntype Options = {\n  type?: string;\n  full: boolean;\n  json?: boolean;\n};\n\nexport async function actionAsync(projectRoot: string, options: Options) {\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    config = await profileMethod(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'introspect') {\n    config = await profileMethod(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n\n    await compileModsAsync(config.exp, {\n      projectRoot,\n      introspect: true,\n      platforms: ['ios', 'android'],\n      assertMissingModProviders: false,\n    });\n    // @ts-ignore\n    delete config.modRequest;\n    // @ts-ignore\n    delete config.modResults;\n  } else if (options.type === 'public') {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profileMethod(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  const configOutput = options.full ? config : config.exp;\n\n  if (!options.json) {\n    Log.log();\n    logConfig(configOutput);\n    Log.log();\n  } else {\n    Log.nested(JSON.stringify(configOutput));\n  }\n}\n"],"mappings":";;;;;;;AAAA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AAEA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;AACA;EAAA;;EAAA;IAAA;EAAA;;EAAA;AAAA;;;;AAQO,eAAeA,WAAf,CAA2BC,WAA3B,EAAgDC,OAAhD,EAAkE;EACvE,IAAIC,MAAJ;;EAEA,IAAID,OAAO,CAACE,IAAR,KAAiB,UAArB,EAAiC;IAC/BD,MAAM,GAAG,MAAM,IAAAE,8BAAA,EAAcC,wCAAd,EAAsCL,WAAtC,EAAmD;MAChEM,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR;IADqD,CAAnD,CAAf;EAGD,CAJD,MAIO,IAAIL,OAAO,CAACE,IAAR,KAAiB,YAArB,EAAmC;IACxCD,MAAM,GAAG,MAAM,IAAAE,8BAAA,EAAcC,wCAAd,EAAsCL,WAAtC,EAAmD;MAChEM,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR;IADqD,CAAnD,CAAf;IAIA,MAAM,IAAAC,+BAAA,EAAiBL,MAAM,CAACM,GAAxB,EAA6B;MACjCR,WADiC;MAEjCS,UAAU,EAAE,IAFqB;MAGjCH,SAAS,EAAE,CAAC,KAAD,EAAQ,SAAR,CAHsB;MAIjCI,yBAAyB,EAAE;IAJM,CAA7B,CAAN,CALwC,CAWxC;;IACA,OAAOR,MAAM,CAACS,UAAd,CAZwC,CAaxC;;IACA,OAAOT,MAAM,CAACU,UAAd;EACD,CAfM,MAeA,IAAIX,OAAO,CAACE,IAAR,KAAiB,QAArB,EAA+B;IACpCD,MAAM,GAAG,IAAAE,8BAAA,EAAcS,mBAAd,EAAyBb,WAAzB,EAAsC;MAC7Cc,yBAAyB,EAAE,IADkB;MAE7CC,cAAc,EAAE;IAF6B,CAAtC,CAAT;EAID,CALM,MAKA,IAAId,OAAO,CAACE,IAAZ,EAAkB;IACvB,MAAM,KAAIa,uBAAJ,EACH,0BAAyBf,OAAO,CAACE,IAAK,uCADnC,CAAN;EAGD,CAJM,MAIA;IACLD,MAAM,GAAG,IAAAE,8BAAA,EAAcS,mBAAd,EAAyBb,WAAzB,EAAsC;MAC7Cc,yBAAyB,EAAE;IADkB,CAAtC,CAAT;EAGD;;EAED,MAAMG,YAAY,GAAGhB,OAAO,CAACiB,IAAR,GAAehB,MAAf,GAAwBA,MAAM,CAACM,GAApD;;EAEA,IAAI,CAACP,OAAO,CAACkB,IAAb,EAAmB;IACjBC,cAAA,CAAIC,GAAJ;;IACA,IAAAC,kCAAA,EAAUL,YAAV;;IACAG,cAAA,CAAIC,GAAJ;EACD,CAJD,MAIO;IACLD,cAAA,CAAIG,MAAJ,CAAWC,IAAI,CAACC,SAAL,CAAeR,YAAf,CAAX;EACD;AACF"}